Here are some Java practice questions covering the topics you've requested:

### 1. Relational Operators
- Write a Java program that checks if a given number is positive, negative, or zero using relational operators.
- Implement a program to compare two integers and print which one is larger or if they are equal.

### 2. Logical Operators
- Create a Java program that determines whether a person is eligible to vote based on age and citizenship status
using logical operators.
- Write a program that checks if a given year is a leap year using logical operators.

### 3. Ternary Operators
- Write a Java program that uses a ternary operator to find the minimum of two numbers.
- Implement a program that checks if a student has passed or failed based on their marks using a ternary operator.

### 4. Switch Statements
- Create a program that takes a number (1-7) as input and prints the corresponding day of the week using a switch
statement.
- Write a program that takes a character representing an arithmetic operation (`+`, `-`, `*`, `/`) and two operands,
and then performs the operation using a switch statement.

### 5. Loops and Enhanced For Loop
- Write a program to print the first 10 numbers in the Fibonacci sequence using a `for` loop.
- Implement a program that uses an enhanced `for` loop to sum all elements of an integer array.
- Create a program to find the factorial of a number using a `while` loop.
-------------------------------------------------------------------------------------------------------------------
### 6. Classes and Objects
- Design a class `Book` with properties like `title`, `author`, and `price`. Write a program to create an object of
this class and display the details of the book.
- Write a Java program that creates a `Student` class with attributes `name`, `rollNumber`, and `marks`. Create
multiple objects and display their details.

### 7. Methods and Method Overloading
- Implement a Java program with a method `calculateArea` to find the area of a circle and a rectangle (method
overloading).
- Write a program that includes a method `printDetails` to display different details based on different types
of input (method overloading).

### 8. Stack and Heap
- Explain how stack and heap memory are used when creating objects in Java.
- Write a program that demonstrates memory allocation in the stack and heap by creating objects in a method.
-------------------------------------------------------------------------------------------------------------------
### 9. Creation of Arrays
- Write a Java program to initialize an array of integers and print all its elements.
- Implement a program to find the largest and smallest elements in an array. // bubble sort

### 10. 2D Arrays
- Create a program that initializes a 2D array and finds the sum of all elements in the array.
- Write a Java program to perform matrix multiplication on two 2D arrays.

### 11. 3D Arrays
- Write a Java program to initialize a 3D array and display its elements in a formatted way.
- Implement a program that calculates the sum of all elements in a 3D array.

### 12. Jagged Arrays
- Create a Java program to initialize and display a jagged array where the lengths of rows vary.
- Write a program to find the maximum element in each row of a jagged array.

### 13. Array of Objects
- Write a Java program that creates an array of `Book` objects and displays the details of each book.
- Implement a program that creates an array of `Student` objects and calculates the average marks of the students.
-------------------------------------------------------------------------------------------------------------------
### 14. Strings
- Write a program to check if a given string is a palindrome.
- Implement a program that counts the frequency of each character in a string.

### 15. Mutable vs. Immutable Strings
- Explain the difference between mutable and immutable strings in Java. Provide examples using `String` and
`StringBuilder`.
- Write a program to demonstrate the mutability of `StringBuilder` by appending and modifying strings.

### 16. StringBuffer
- Write a program that uses `StringBuffer` to reverse a string.
- Implement a program that uses `StringBuffer` to replace a substring within a string.

### 17. Static Variables, Methods, and Blocks
- Write a Java program to demonstrate the use of static variables and methods.
- Create a program that uses a static block to initialize static variables and display their values.
