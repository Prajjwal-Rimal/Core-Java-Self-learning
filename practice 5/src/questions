### **1. Loops and Enhanced For Loop**
- Write a program to print the first 10 prime numbers using a `for` loop.
- Implement a program that uses a `while` loop to reverse a given integer.
- Write a program that uses a `do-while` loop to print the multiplication table of a given number.
- Create a program that uses an enhanced `for` loop to find the average of an array of integers.
- Write a program that uses a nested `for` loop to print a pattern like:
  ```
  *
  **
  ***
  ****
  ```
-------------------------------------------------------------------------------------------------------------------
### **2. Creation of Arrays**
- Write a program to create an array of `n` integers (where `n` is provided by the user) and calculate the sum of
all elements.
- Implement a program that takes input from the user to fill an array and then prints the array in reverse order.
- Create a program that finds the second largest element in an integer array.

### **3. 2D Arrays**
- Write a Java program to create a 2D array of integers and initialize it with values. Print the elements in matrix
form.
- Implement a program that calculates the sum of each row and each column of a 2D array.
- Write a program to transpose a given 2D matrix (convert rows into columns and vice versa).

### **4. 3D Arrays**
- Create a Java program to initialize a 3D array with random numbers between 1 and 100 and print its elements in a
formatted way.
- Write a program that calculates the sum of all elements in a 3D array.
- Implement a program to find the maximum value in a 3D array.

### **5. Jagged Arrays**
- Write a Java program to create a jagged array where each row has a different number of columns. Initialize the
jagged array with random values and print it.
- Implement a program that finds the maximum element in each row of a jagged array.
- Write a program to calculate the sum of all elements in a jagged array.

### **6. Array of Objects**
- Create a `Book` class with attributes like `title`, `author`, and `price`. Write a program to create an array
of `Book` objects and display their details.
- Write a program that creates an array of `Student` objects and calculates the average marks of all students.
- Implement a program to create an array of `Employee` objects with attributes like `name`, `id`, and `salary`.
Write a method to find the employee with the highest salary.
-------------------------------------------------------------------------------------------------------------------
### **7. Strings**
- Write a program to check if a given string is a palindrome.
- Create a program that counts the frequency of each character in a given string.
- Implement a program that takes a sentence as input and counts the number of vowels and consonants.

### **8. Mutable vs. Immutable Strings**
- Write a program that demonstrates the immutability of the `String` class by attempting to modify a `String`
object and observing the results.
- Create a program that uses `StringBuilder` or `StringBuffer` to modify a string and demonstrate its mutability
by appending, reversing, and deleting characters.

### **9. StringBuffer**
- Implement a program that uses `StringBuffer` to reverse a given string.
- Write a program to use `StringBuffer` to replace a substring within a string.
- Create a program that demonstrates the use of various `StringBuffer` methods like `append()`, `insert()`,
 `delete()`, `replace()`, and `reverse()`.
-------------------------------------------------------------------------------------------------------------------
### **10. Static Variables, Methods, and Blocks**
- Write a program to demonstrate the use of static variables by creating a class `Counter` that keeps track of
the number of objects created.
- Implement a program that uses a static method to calculate the factorial of a given number.
- Create a program that uses a static block to initialize static variables and prints their values.
-------------------------------------------------------------------------------------------------------------------
### **11. Encapsulation, Getters, and Setters**
- Write a Java program that demonstrates encapsulation by creating a `Person` class with private attributes `name`
and `age`, and providing public getters and setters for them.
- Create a `BankAccount` class with private attributes `accountNumber`, `accountHolderName`, and `balance`. Write
appropriate getters and setters to access and update these attributes.

### **12. `this` Keyword**
- Write a program to demonstrate the use of the `this` keyword to refer to the current object.
- Implement a `Student` class with a constructor that initializes the student's name and ID using the `this` keyword.
 Write a method to display the student's details.
-------------------------------------------------------------------------------------------------------------------
Here are some additional Java practice questions focusing on **constructors**, including **default and parameterized constructors**, and **naming conventions**:

### **13. Constructors**
- **Default Constructor**:
  - Write a Java program to create a `Car` class with attributes like `model` and `year`. Use a default constructor to initialize these attributes with some default values. Print the details of the car using a method.
  - Create a class `Circle` with a default constructor that initializes the radius to `1.0`. Write a method to calculate and return the area of the circle. Create an object of the `Circle` class and display the area.
  - Write a `Book` class that has a default constructor. The constructor should print a message like "Book object created!" when it is called. Create an object of this class to test if the message is displayed.

- **Parameterized Constructor**:
  - Implement a `Student` class with attributes `name`, `id`, and `marks`. Use a parameterized constructor to initialize these attributes. Write a method to display the student's details.
  - Create a `Rectangle` class with attributes `length` and `breadth`. Write a parameterized constructor to initialize these attributes and a method to calculate and display the perimeter of the rectangle.
  - Write a program that has a `Product` class with a parameterized constructor that accepts parameters like `productName`, `productId`, and `price`. Create an array of `Product` objects and display their details.

- **Constructor Overloading**:
  - Write a Java program to demonstrate constructor overloading by creating a `Person` class with three constructors: one with no parameters, one with one parameter (`name`), and one with two parameters (`name` and `age`). Create objects using different constructors and display their values.
  - Create a `Triangle` class that has constructors to initialize:
    - Only the base of the triangle.
    - Both the base and height of the triangle.
    - Write methods to calculate the area using different constructors.
  - Implement a `BankAccount` class that has overloaded constructors:
    - A default constructor with no parameters.
    - A constructor that initializes `accountNumber` and `accountHolderName`.
    - A constructor that initializes `accountNumber`, `accountHolderName`, and `initialBalance`.

### **14. Naming Conventions**
- **Classes and Interfaces**:
  - Create a Java class that demonstrates proper naming conventions for classes, interfaces, and methods. Follow Java conventions by using PascalCase for classes (`StudentDetails`, `BankAccount`) and interfaces (`Readable`, `Printable`), and camelCase for methods (`calculateTotalMarks`, `displayDetails`).

- **Variables and Methods**:
  - Write a program to demonstrate proper naming conventions for variables and methods. Use camelCase for variable names (`studentName`, `totalMarks`) and method names (`calculateAverageMarks`, `displayStudentInfo`).

- **Constants**:
  - Implement a program where you define constants using `final` keyword with proper naming conventions (all uppercase letters with underscores). For example, `final int MAX_STUDENTS = 100;` and `final double PI = 3.14159;`.

### **Practice Questions on Naming Conventions and Constructors**
1. **Write a program to demonstrate proper naming conventions** by creating a `Library` class with attributes `libraryName`, `libraryLocation`, and methods like `addBook()`, `removeBook()`, and `listBooks()`.
2. **Create a class `Employee`** with private attributes `name`, `id`, and `salary`. Use a parameterized constructor to initialize these values. Write getters and setters following Java naming conventions and display the employee details.
3. **Implement a `Vehicle` class** with a default constructor that initializes default values, and a parameterized constructor that initializes make, model, and year. Demonstrate the use of both constructors by creating objects.
4. **Write a program using constructor overloading** in a `Customer` class to initialize:
    - Only customer name.
    - Customer name and ID.
    - Customer name, ID, and address. Use proper naming conventions for all variables, methods, and constructors.
5. **Create a `Person` class** that demonstrates proper naming conventions and uses both default and parameterized constructors to initialize attributes like `firstName`, `lastName`, and `age`. Write methods to display the details of a person.

These questions will help reinforce your understanding of constructors (default, parameterized, and overloaded) and Java naming conventions. Let me know if you need further explanations or additional questions!