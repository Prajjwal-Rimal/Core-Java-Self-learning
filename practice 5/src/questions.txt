Here are Java practice questions on the topics you've mentioned:

### 1. Loops and Enhanced For Loops
1. Write a Java program that prints the Fibonacci series up to `n` terms using a `for` loop.
2. Create a program to find the sum of all even numbers from 1 to 100 using a `while` loop.
3. Write a Java program to reverse an array using an enhanced `for` loop.
4. Create a Java program that counts the frequency of each character in a given string using a `for` loop.

### 2. Arrays, 2D Arrays, and 3D Arrays
1. Write a Java program to find the largest and smallest elements in an array.
2. Create a program to multiply two 2D matrices.
3. Write a Java program to initialize a 3D array and print its elements.
4. Develop a program that rotates a 2D array 90 degrees clockwise.

### 3. Strings, Mutable vs Immutable Strings, and StringBuffer
1. Write a program to check if a given string is a palindrome.
2. Create a Java program to count the number of vowels and consonants in a given string.
3. Demonstrate the difference between mutable and immutable strings using `String` and `StringBuffer`.
4. Write a program to reverse a given string using `StringBuffer`.

### 4. Static Variables, Methods, and Blocks
1. Write a Java program that uses a static variable to count the number of objects created for a class.
2. Create a program to demonstrate the use of a static method to perform addition of two numbers.
3. Develop a Java program to demonstrate the use of a static block for initializing static data.

### 5. Encapsulation, Getter and Setter, and `this` Keyword
1. Write a Java program to create a class `Person` with private fields for name, age, and address. Use getter and setter methods to access and update these fields.
2. Create a program that demonstrates the use of the `this` keyword to resolve variable shadowing between instance variables and parameters.

### 6. Constructors, Parameterized Constructors, and Constructor Overloading
1. Write a Java program to create a class `Employee` with a default constructor, a parameterized constructor, and a constructor that takes two parameters (name and salary). Show how constructor overloading works.
2. Develop a program that demonstrates the use of a parameterized constructor for setting initial values of an object.

### 7. Naming Conventions and Anonymous Objects
1. Create a Java class named `studentData` that follows proper naming conventions, and instantiate it using an anonymous object.
2. Write a Java program to show how an anonymous object can be used to call a method.

### 8. Inheritance, Single and Multilevel Inheritance, and Multiple Inheritance
1. Write a Java program to demonstrate single inheritance using a base class `Vehicle` and a derived class `Car`.
2. Develop a Java program that demonstrates multilevel inheritance using classes `Animal`, `Mammal`, and `Dog`.
3. Explain why Java does not support multiple inheritance directly (without using interfaces).

### 9. Method Overriding
1. Write a Java program where a subclass overrides a method of its superclass and demonstrates runtime polymorphism.
2. Create a program that shows the use of the `super` keyword to call a method from the superclass.

### 10. Packages and Access Modifiers
1. Write a Java program to demonstrate the use of packages by creating two classes in different packages and accessing one class from another.
2. Create a program that demonstrates the use of different access modifiers (`private`, `protected`, `public`, `default`) in Java.

### 11. `this` and `super` Keywords
1. Write a Java program to demonstrate the use of the `this` keyword to call a constructor from another constructor in the same class.
2. Develop a Java program that demonstrates the use of the `super` keyword to call a superclass constructor.

### 12. Polymorphism and Dynamic Method Dispatch
1. Write a Java program to demonstrate polymorphism by creating a superclass `Shape` and subclasses `Circle` and `Square`, with an overridden method `draw()`.
2. Develop a Java program to demonstrate dynamic method dispatch using the concept of polymorphism.

Feel free to ask for detailed solutions or further explanations on any of these topics!